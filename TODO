<!-- vi: set ft=mkd ts=8 sw=2 et sts=2: -->

Feel free to put your wishes and questions into this file.
It would be nice to prefix your statements with your initials
or one more letter if needed.


# Development
* CaG: Should we discuss the further development using a bug tracker?
  And put everythig below into requests?



# DifferentiableFunction interface
* CaG: Should the derivative type for a Function<FV<T,n>, FM<T,m,1> >
  mapping a vector FV<T,n> to a single columns matrix FM<T,m,1>
  be the FM<T,n,m> ? If yes we would have second derivatives
  for functions mapping FV<T,n> to FV<T,1>.




# EntitySet interface
* CaG: It seems that the EntitySet concept and GridViewEntitySet are
  candidates for dune-grid.
* CaG: Should the EntitySet export the grid type?
* CaG: If yes, should EntitySet store/export a pointer/reference to the grid?



# GridFunction interface
* CaG: Should GridFunction export the grid type?
* CaG: If yes, should GridFunction store/export a pointer/reference to the grid?
* CaG: Does the current GridFunction interface support Element!=Entiy<0> ?
  We dicussed that we would in priciple like such functions in the future.
  With the current interface GridFunction could directly support this
  since the type Element and LocalCoordinate is fully parametrized
  by the EntitySet.



# GridViewFunction interface
* CaG: Should GridViewnction default-implement the global evaluate() method?
  This would be as simple as

    typedef typename GridView::Grid::template Codim<0>::EntityPointer ElementPointer;
    Dune::HierarchicSearch<typename GridView::Grid, EntitySet> hsearch(this->gridView().grid(), this->entitySet());
    ElementPointer e = hsearch.findEntity(x);
    ::Dune::Functions::localFunction(*this, *e)->evaluate(e->geometry().local(x), y);

  In priciple this would also work for GridFunction if it knows the grid
  and if Element=Entity<0>.
