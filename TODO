<!-- vi: set ft=mkd ts=8 sw=2 et sts=2: -->

Feel free to put your wishes and questions into this file.
It would be nice to prefix your statements with your initials
or one more letter if needed.

# IO
* OS: Make SubsamplingVTKWriter accept a DiscreteScalarGlobalBasisFunction
  directly, rather than a local function

# Function space basis interface
* OS: The TaylorHoodIndexSet class currently contains two members

    enum { multiIndexMaxSize = 2 };
    size_type dimension() const;

  which were never officially discussed.  Christian added them because
  something like this was needed, but we may want to discuss these
  methods at the next meeting.



# Development
* CaG: Should we discuss the further development using a bug tracker?
  And put everythig below into requests?



# DefaultDerivativeTraits
* CaG: Should the derivative range for a function with signature
  FM<T,m,1>(FV<T,n>) be FM<T,n,m> ? If yes we would have second
  derivatives for functions mapping FV<T,n> to FV<T,1>.



# EntitySet interface
* CaG: It seems that the EntitySet concept and GridViewEntitySet are
  candidates for dune-grid.



# GridFunction concept
* CaG: Should GridFunction export the grid type?
* CaG: If yes, should GridFunction store/export a pointer to the grid?
* CaG: While LocalFunction is defined in a grid-agnostig way with
  local coordinates from a 'LocalContext'. In contrast to this
  the naming of GridFunction is linked to Grids:
  entitySet(), LocalContext=decltype(entitySet())::Element.
  There seems to be no need for this and we could
  simply rename this in a grid-agnostic way if someone
  comes up with better names than LocalizableFunction,
  localContextSet()



# LocalFunction concept
* CaG: What's the precise definition of a local function?
  Currently it represents a GridFunction locally it
  terms of local coordinates. However its derivatives
  (not the values!) are still returned wrt the global
  coordinate system, exactly like GlobalFiniteElement does.
  Although the LocalFunctions implements the DifferentiableFunction
  concept, this  makes its derivatives somehow inconsistent.



# GridViewFunction concept
* CaG: Should GridViewFunction default-implement the global evaluate() method?
  This would be as simple as

    typedef typename GridView::Grid::template Codim<0>::EntityPointer ElementPointer;
    Dune::HierarchicSearch<typename GridView::Grid, EntitySet> hsearch(this->gridView().grid(), this->entitySet());
    ElementPointer e = hsearch.findEntity(x);
    ::Dune::Functions::localFunction(*this, *e)->evaluate(e->geometry().local(x), y);

  In priciple this would also work for GridFunction if it knows the grid
  and if Element=Entity<0>.
